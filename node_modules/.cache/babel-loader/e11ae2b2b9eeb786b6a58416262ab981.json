{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSpring, useTransition, animated, config } from \"react-spring\";\n\nvar TextTransition = function TextTransition(props) {\n  var _a = props.direction,\n      direction = _a === void 0 ? \"up\" : _a,\n      _b = props.inline,\n      inline = _b === void 0 ? false : _b,\n      _c = props.springConfig,\n      springConfig = _c === void 0 ? config.default : _c,\n      _d = props.delay,\n      delay = _d === void 0 ? 0 : _d,\n      className = props.className,\n      style = props.style,\n      children = props.children;\n  var initialRun = React.useRef(true);\n  var transitions = useTransition([children], {\n    from: {\n      opacity: 0,\n      transform: \"translateY(\".concat(direction === \"down\" ? \"-100%\" : \"100%\", \")\")\n    },\n    enter: {\n      opacity: 1,\n      transform: \"translateY(0%)\"\n    },\n    leave: {\n      opacity: 0,\n      transform: \"translateY(\".concat(direction === \"down\" ? \"100%\" : \"-100%\", \")\"),\n      position: \"absolute\"\n    },\n    config: springConfig,\n    immediate: initialRun.current,\n    delay: !initialRun.current ? delay : undefined\n  });\n\n  var _e = React.useState(0),\n      width = _e[0],\n      setWidth = _e[1];\n\n  var currentRef = React.useRef(null);\n  var heightRef = React.useRef(\"auto\");\n  React.useEffect(function () {\n    initialRun.current = false;\n    var elem = currentRef.current;\n\n    if (!elem) {\n      return;\n    }\n\n    var _a = elem.getBoundingClientRect(),\n        width = _a.width,\n        height = _a.height;\n\n    setWidth(width);\n    heightRef.current = height;\n  }, [children, setWidth, currentRef]);\n  var widthTransition = useSpring({\n    to: {\n      width: width\n    },\n    config: springConfig,\n    immediate: initialRun.current,\n    delay: !initialRun.current ? delay : undefined\n  });\n  return React.createElement(animated.div, {\n    className: \"text-transition \".concat(className),\n    style: __assign(__assign(__assign({}, inline && !initialRun.current ? widthTransition : undefined), style), {\n      whiteSpace: inline ? \"nowrap\" : \"normal\",\n      display: inline ? \"inline-flex\" : \"flex\",\n      height: heightRef.current\n    })\n  }, transitions(function (styles, item) {\n    return React.createElement(animated.div, {\n      style: __assign({}, styles),\n      ref: item === children ? currentRef : undefined,\n      children: item\n    });\n  }));\n};\n\nTextTransition.propTypes = {\n  direction: PropTypes.oneOf([\"up\", \"down\"]),\n  inline: PropTypes.bool,\n  delay: PropTypes.number,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  springConfig: PropTypes.any\n};\nexport default TextTransition;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAAQC,SAAR,EAAmBC,aAAnB,EAAkCC,QAAlC,EAA4CC,MAA5C,QAAuE,cAAvE;;AAEA,IAAMC,cAAc,GAAkC,SAAhDA,cAAgD,CAACC,KAAD,EAAM;EAEpD,SAOAA,KAAK,UAPL;EAAA,aAAS,mBAAG,IAAH,GAAOC,EAAhB;EAAA,IACAC,KAMAF,KAAK,OAPL;EAAA,IACAG,MAAM,mBAAG,KAAH,GAAQD,EADd;EAAA,IAEAE,KAKAJ,KAAK,aAPL;EAAA,IAEAK,YAAY,mBAAGP,MAAM,CAACQ,OAAV,GAAiBF,EAF7B;EAAA,IAGNG,KAIMP,KAAK,MAPL;EAAA,IAGNQ,KAAK,mBAAG,CAAH,GAAID,EAHH;EAAA,IAIAE,SAAS,GAGTT,KAAK,UAPL;EAAA,IAKAU,KAAK,GAELV,KAAK,MAPL;EAAA,IAMAW,QAAQ,GACRX,KAAK,SAPL;EASJ,IAAMY,UAAU,GAAGnB,KAAK,CAACoB,MAAN,CAAa,IAAb,CAAnB;EAEH,IAAMC,WAAW,GAAGlB,aAAa,CAAC,CAACe,QAAD,CAAD,EAAa;IAC7CI,IAAI,EAAE;MAAEC,OAAO,EAAG,CAAZ;MAAeC,SAAS,EAAG,qBAAcC,SAAS,KAAK,MAAd,GAAuB,OAAvB,GAAiC,MAA/C,EAAqD,GAArD;IAA3B,CADuC;IAE7CC,KAAK,EAAE;MAAEH,OAAO,EAAG,CAAZ;MAAeC,SAAS,EAAG;IAA3B,CAFsC;IAG7CG,KAAK,EAAE;MAAEJ,OAAO,EAAG,CAAZ;MAAeC,SAAS,EAAG,qBAAcC,SAAS,KAAK,MAAd,GAAuB,MAAvB,GAAgC,OAA9C,EAAqD,GAArD,CAA3B;MAAqFG,QAAQ,EAAE;IAA/F,CAHsC;IAI7CvB,MAAM,EAAEO,YAJqC;IAKvCiB,SAAS,EAAEV,UAAU,CAACW,OALiB;IAM7Cf,KAAK,EAAE,CAAEI,UAAU,CAACW,OAAb,GAAuBf,KAAvB,GAA+BgB;EANO,CAAb,CAAjC;;EASS,SAAoB/B,KAAK,CAACgC,QAAN,CAAuB,CAAvB,CAApB;EAAA,IAACC,KAAK,QAAN;EAAA,IAAQC,QAAQ,QAAhB;;EACN,IAAMC,UAAU,GAAGnC,KAAK,CAACoB,MAAN,CAA6B,IAA7B,CAAnB;EACH,IAAMgB,SAAS,GAAGpC,KAAK,CAACoB,MAAN,CAA8B,MAA9B,CAAlB;EAEGpB,KAAK,CAACqC,SAAN,CAAgB;IACZlB,UAAU,CAACW,OAAX,GAAqB,KAArB;IAEA,IAAMQ,IAAI,GAAGH,UAAU,CAACL,OAAxB;;IAEA,IAAI,CAAEQ,IAAN,EAAY;MACR;IACH;;IAEK,SAAoBA,IAAI,CAACC,qBAAL,EAApB;IAAA,IAAEN,KAAK,WAAP;IAAA,IAASO,MAAM,YAAf;;IACNN,QAAQ,CAACD,KAAD,CAAR;IACNG,SAAS,CAACN,OAAV,GAAoBU,MAApB;EACG,CAZD,EAYG,CAACtB,QAAD,EAAWgB,QAAX,EAAqBC,UAArB,CAZH;EAcA,IAAMM,eAAe,GAAGvC,SAAS,CAAC;IACpCwC,EAAE,EAAE;MAAET,KAAK;IAAP,CADgC;IAEpC5B,MAAM,EAAEO,YAF4B;IAG9BiB,SAAS,EAAEV,UAAU,CAACW,OAHQ;IAIpCf,KAAK,EAAE,CAAEI,UAAU,CAACW,OAAb,GAAuBf,KAAvB,GAA+BgB;EAJF,CAAD,CAAjC;EAOH,OACC/B,oBAACI,QAAQ,CAACuC,GAAV,EAAa;IACZ3B,SAAS,EAAE,0BAAmBA,SAAnB,CADC;IAEZC,KAAK,iCACYP,MAAM,IAAI,CAAES,UAAU,CAACW,OAAvB,GAAiCW,eAAjC,GAAmDV,SAD/D,GAEDd,KAFC,GAEI;MACR2B,UAAU,EAAElC,MAAM,GAAG,QAAH,GAAc,QADxB;MAERmC,OAAO,EAAEnC,MAAM,GAAG,aAAH,GAAmB,MAF1B;MAGR8B,MAAM,EAAEJ,SAAS,CAACN;IAHV,CAFJ;EAFO,CAAb,EAUWT,WAAW,CAAC,UAACyB,MAAD,EAASC,IAAT,EAAa;IACtB,2BAAC3C,QAAQ,CAACuC,GAAV,EAAa;MAAC1B,KAAK,eAAO6B,MAAP,CAAN;MACCE,GAAG,EAAED,IAAI,KAAK7B,QAAT,GAAoBiB,UAApB,GAAiCJ,SADvC;MAECb,QAAQ,EAAE6B;IAFX,CAAb;EAEgC,CAHxB,CAVtB,CADD;AAkBA,CAjED;;AA6EAzC,cAAc,CAAC2C,SAAf,GAA2B;EAC1BxB,SAAS,EAAExB,SAAS,CAACiD,KAAV,CAAgB,CAAC,IAAD,EAAO,MAAP,CAAhB,CADe;EAE1BxC,MAAM,EAAET,SAAS,CAACkD,IAFQ;EAG1BpC,KAAK,EAAEd,SAAS,CAACmD,MAHS;EAI1BpC,SAAS,EAAEf,SAAS,CAACoD,MAJK;EAK1BpC,KAAK,EAAEhB,SAAS,CAACqD,MALS;EAM1B1C,YAAY,EAAEX,SAAS,CAACsD;AANE,CAA3B;AASA,eAAejD,cAAf","names":["React","PropTypes","useSpring","useTransition","animated","config","TextTransition","props","_a","_b","inline","_c","springConfig","default","_d","delay","className","style","children","initialRun","useRef","transitions","from","opacity","transform","direction","enter","leave","position","immediate","current","undefined","useState","width","setWidth","currentRef","heightRef","useEffect","elem","getBoundingClientRect","height","widthTransition","to","div","whiteSpace","display","styles","item","ref","propTypes","oneOf","bool","number","string","object","any"],"sources":["/Users/usere/Documents/GitHub/ku-bti/node_modules/react-text-transition/src/components/TextTransition.tsx"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {useSpring, useTransition, animated, config, SpringConfig} from \"react-spring\";\r\n\r\nconst TextTransition: React.FC<TextTransitionProps> = (props) => {\r\n    const {\r\n        direction = \"up\",\r\n        inline = false,\r\n        springConfig = config.default,\r\n\t\tdelay = 0,\r\n        className,\r\n        style,\r\n        children,\r\n    } = props;\r\n\r\n    const initialRun = React.useRef(true);\r\n\r\n\tconst transitions = useTransition([children], {\r\n\t\tfrom: { opacity : 0, transform : `translateY(${direction === \"down\" ? \"-100%\" : \"100%\"})` },\r\n\t\tenter: { opacity : 1, transform : \"translateY(0%)\" },\r\n\t\tleave: { opacity : 0, transform : `translateY(${direction === \"down\" ? \"100%\" : \"-100%\"})`, position: \"absolute\" },\r\n\t\tconfig: springConfig,\r\n        immediate: initialRun.current,\r\n\t\tdelay: ! initialRun.current ? delay : undefined,\r\n\t});\r\n\r\n    const [width, setWidth] = React.useState<number>(0);\r\n    const currentRef = React.useRef<HTMLDivElement>(null);\r\n\tconst heightRef = React.useRef<number | string>(\"auto\");\r\n\r\n    React.useEffect(() => {\r\n        initialRun.current = false;\r\n\r\n        const elem = currentRef.current;\r\n\r\n        if (! elem) {\r\n            return;\r\n        }\r\n        \r\n        const { width, height } = elem.getBoundingClientRect();\r\n        setWidth(width);\r\n\t\theightRef.current = height;\r\n    }, [children, setWidth, currentRef]);\r\n\r\n    const widthTransition = useSpring({\r\n\t\tto: { width },\r\n\t\tconfig: springConfig,\r\n        immediate: initialRun.current,\r\n\t\tdelay: ! initialRun.current ? delay : undefined,\r\n\t});\r\n\r\n\treturn (\r\n\t\t<animated.div\r\n\t\t\tclassName={`text-transition ${className}`}\r\n\t\t\tstyle={{\r\n                ...(inline && ! initialRun.current ? widthTransition : undefined),\r\n\t\t\t\t...style,\r\n\t\t\t\twhiteSpace: inline ? \"nowrap\" : \"normal\",\r\n\t\t\t\tdisplay: inline ? \"inline-flex\" : \"flex\",\r\n\t\t\t\theight: heightRef.current,\r\n\t\t\t}}\r\n\t\t>\r\n            {transitions((styles, item) =>\r\n                <animated.div style={{ ...styles }}\r\n                              ref={item === children ? currentRef : undefined}\r\n                              children={item} />\r\n            )}\r\n\t\t</animated.div>\r\n\t);\r\n};\r\n\r\ninterface TextTransitionProps {\r\n\treadonly direction?: \"up\" | \"down\";\r\n\treadonly inline?: boolean;\r\n\treadonly delay?: number;\r\n\treadonly springConfig?: SpringConfig;\r\n\treadonly className?: string;\r\n\treadonly style?: React.CSSProperties;\r\n    readonly children: React.ReactNode;\r\n}\r\n\r\nTextTransition.propTypes = {\r\n\tdirection: PropTypes.oneOf([\"up\", \"down\"]),\r\n\tinline: PropTypes.bool,\r\n\tdelay: PropTypes.number,\r\n\tclassName: PropTypes.string,\r\n\tstyle: PropTypes.object,\r\n\tspringConfig: PropTypes.any,\r\n};\r\n\r\nexport default TextTransition;\r\n"]},"metadata":{},"sourceType":"module"}