var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from "react";
import PropTypes from "prop-types";
import { useSpring, useTransition, animated, config } from "react-spring";
var TextTransition = function (props) {
    var _a = props.direction, direction = _a === void 0 ? "up" : _a, _b = props.inline, inline = _b === void 0 ? false : _b, _c = props.springConfig, springConfig = _c === void 0 ? config.default : _c, _d = props.delay, delay = _d === void 0 ? 0 : _d, className = props.className, style = props.style, children = props.children;
    var initialRun = React.useRef(true);
    var transitions = useTransition([children], {
        from: { opacity: 0, transform: "translateY(".concat(direction === "down" ? "-100%" : "100%", ")") },
        enter: { opacity: 1, transform: "translateY(0%)" },
        leave: { opacity: 0, transform: "translateY(".concat(direction === "down" ? "100%" : "-100%", ")"), position: "absolute" },
        config: springConfig,
        immediate: initialRun.current,
        delay: !initialRun.current ? delay : undefined,
    });
    var _e = React.useState(0), width = _e[0], setWidth = _e[1];
    var currentRef = React.useRef(null);
    var heightRef = React.useRef("auto");
    React.useEffect(function () {
        initialRun.current = false;
        var elem = currentRef.current;
        if (!elem) {
            return;
        }
        var _a = elem.getBoundingClientRect(), width = _a.width, height = _a.height;
        setWidth(width);
        heightRef.current = height;
    }, [children, setWidth, currentRef]);
    var widthTransition = useSpring({
        to: { width: width },
        config: springConfig,
        immediate: initialRun.current,
        delay: !initialRun.current ? delay : undefined,
    });
    return (React.createElement(animated.div, { className: "text-transition ".concat(className), style: __assign(__assign(__assign({}, (inline && !initialRun.current ? widthTransition : undefined)), style), { whiteSpace: inline ? "nowrap" : "normal", display: inline ? "inline-flex" : "flex", height: heightRef.current }) }, transitions(function (styles, item) {
        return React.createElement(animated.div, { style: __assign({}, styles), ref: item === children ? currentRef : undefined, children: item });
    })));
};
TextTransition.propTypes = {
    direction: PropTypes.oneOf(["up", "down"]),
    inline: PropTypes.bool,
    delay: PropTypes.number,
    className: PropTypes.string,
    style: PropTypes.object,
    springConfig: PropTypes.any,
};
export default TextTransition;
//# sourceMappingURL=TextTransition.js.map